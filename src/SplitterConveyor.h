/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class SplitterConveyor */

#ifndef _Included_SplitterConveyor
#define _Included_SplitterConveyor
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     SplitterConveyor
 * Method:    initializeHardwarePorts
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_initializeHardwarePorts
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    closeChannels
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_closeChannels
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1_getPosition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_cylinder1_1getPosition
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1_moveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1_1moveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1_moveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1_1moveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1_stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1_1stop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2_getPosition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_cylinder2_1getPosition
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2_moveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder2_1moveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2_moveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder2_1moveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2_stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder2_1stop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStart_getPosition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_cylinderStart_1getPosition
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStart_moveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStart_1moveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStart_moveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStart_1moveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStart_stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStart_1stop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    conveyor_move
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_conveyor_1move
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    conveyor_stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_conveyor_1stop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    conveyor_isMoving
 * Signature: ()V
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_conveyor_1isMoving
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    getIdentificationSensors
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_getIdentificationSensors
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    getDock1Sensor
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_getDock1Sensor
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    getDock2Sensor
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_getDock2Sensor
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    getDockActuators
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_getDockActuators
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    led_change
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_led_1change
  (JNIEnv *, jclass, jboolean);

#ifdef __cplusplus
}
#endif
#endif
